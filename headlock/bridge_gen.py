"""
This module provides the code to generate the bridge code.
"""
from .c_data_model import CStructType, CFuncType, CPointerType


def write_bridge_code(output, globals, implementations):
    output.write(
        '/* This file is automaticially generated by bridge_gen.py. *\n'
        ' * DO NOT MODIFY IT MANUALLY.                             */\n'
        '\n')
    write_required_struct_defs(output, globals)
    write_mock_defs(output, globals, implementations)


def write_required_struct_defs(output, globals):
    for cstruct_type in iter_req_structs_in_dep_order(globals.values()):
        output.write(cstruct_type.c_definition() + ';\n')
    for cstruct_type in iter_req_structs_in_dep_order(globals.values(),
                                                      only_embedded_types=True):
        output.write(cstruct_type.c_definition_full() + ';\n')
    output.write('\n')


def iter_req_structs_in_dep_order(ctypes, only_embedded_types=False):
    processed = set()
    def emb_struct_only(ctype, parent_ctype):
        return not (isinstance(ctype, CStructType)
                    and isinstance(parent_ctype, CPointerType))
    for ctype in ctypes:
        sub_types = ctype.iter_subtypes(
            top_level_last=True,
            filter=emb_struct_only if only_embedded_types else None,
            processed=processed)
        for sub_type in sub_types:
            if isinstance(sub_type, CStructType) \
                    and not sub_type.is_anonymous_struct():
                yield sub_type


def write_mock_defs(output, globals, implementations):
    mocks = {name: type
             for name, type in globals.items()
             if name not in implementations}
    for mock_name, mock in sorted(mocks.items()):
        if not isinstance(mock, CFuncType):
            output.write(mock.c_definition(mock_name) + ';\n')
        else:
            output.write(mock.c_definition(f'(* {mock_name}_mock)') + ' = 0;\n')
            write_mock_redirect_func(output, mock, mock_name)
    output.write('\n')


def write_mock_redirect_func(output, mock, name):
    output.write(mock.c_definition(name) + '\n')
    output.write('{\n')
    output.write('\treturn ' if mock.returns is not None else '\t')
    params = ', '.join(f'p{pndx}' for pndx in range(len(mock.args)))
    output.write(f'(* {name}_mock)({params});\n')
    output.write('}\n')
